<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="test_cleaner.cpp"><class>class <name>ComplexNumberTest</name> <super>: <specifier>public</specifier> <name><name>CppUnit</name><operator>::</operator><name>TestFixture</name></name></super>  <block>{<private type="default">
</private><private>private:
  <decl_stmt><decl><type><name>Complex</name> <modifier>*</modifier></type><name>m_10_1</name></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>m_1_1</name></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>m_11_2</name></decl>;</decl_stmt>
</private><public>public:
  <comment type="block" format="doxygen">/** @stereotype command test_initializer */</comment>
  <function stereotype="command test_initializer "><type><name>void</name></type> <name>setUp</name><parameter_list>()</parameter_list>
  <block>{
    <expr_stmt><expr><name>m_10_1</name> <operator>=</operator> <operator>new</operator> <call><name>Complex</name><argument_list>( <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_1_1</name> <operator>=</operator> <operator>new</operator> <call><name>Complex</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>m_11_2</name> <operator>=</operator> <operator>new</operator> <call><name>Complex</name><argument_list>( <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>  
  }</block></function>

  <comment type="block" format="doxygen">/** @stereotype test_cleaner */</comment>
  <function stereotype="test_cleaner "><type><name>void</name></type> <name>tearDown</name><parameter_list>()</parameter_list> 
  <block>{
    <expr_stmt><expr><operator>delete</operator> <name>m_10_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>delete</operator> <name>m_1_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>delete</operator> <name>m_11_2</name></expr>;</expr_stmt>
  }</block></function>

  <comment type="line">//testing</comment>
  <comment type="block" format="doxygen">/** @stereotype command boolean_verifier */</comment>
  <function stereotype="command boolean_verifier "><type><name>void</name></type> <name>testEquality</name><parameter_list>()</parameter_list>
  <block>{
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>( <argument><expr><operator>*</operator><name>m_10_1</name> <operator>==</operator> <operator>*</operator><name>m_10_1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>( <argument><expr><operator>!</operator><operator>(</operator><operator>*</operator><name>m_10_1</name> <operator>==</operator> <operator>*</operator><name>m_11_2</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="line">//more testing</comment>
  <comment type="block" format="doxygen">/** @stereotype command boolean_verifier */</comment>
  <function stereotype="command boolean_verifier "><type><name>void</name></type> <name>testAddition</name><parameter_list>()</parameter_list>
  <block>{
    <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>( <argument><expr><operator>*</operator><name>m_10_1</name> <operator>+</operator> <operator>*</operator><name>m_1_1</name> <operator>==</operator> <operator>*</operator><name>m_11_2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  }</block></function>
</public>}</block>;</class>
</unit>
