<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="hybrid_verifier_2.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cppunit/extensions/TestFactoryRegistry.h&gt;</cpp:file></cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cppunit/ui/text/TestRunner.h&gt;</cpp:file></cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cppunit/CompilerOutputter.h&gt;</cpp:file></cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cppunit/TestCase.h&gt;</cpp:file></cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cppunit/extensions/HelperMacros.h&gt;</cpp:file></cpp:include>



    <class>class <name>ExampleTestCase</name> <super>: <specifier>public</specifier> <name><name>CppUnit</name><operator>::</operator><name>TestCase</name></name></super>
    <block>{<private type="default">


      <constructor_decl><name>CPPUNIT_TEST_SUITE</name><parameter_list>( <parameter><decl><type><name>ExampleTestCase</name></type></decl></parameter> )</parameter_list>;</constructor_decl>
      <constructor_decl><name>CPPUNIT_TEST</name><parameter_list>( <parameter><decl><type><name>example</name></type></decl></parameter> )</parameter_list>;</constructor_decl>
      <constructor_decl><name>CPPUNIT_TEST</name><parameter_list>( <parameter><decl><type><name>anotherExample</name></type></decl></parameter> )</parameter_list>;</constructor_decl>
      <constructor_decl><name>CPPUNIT_TEST</name><parameter_list>( <parameter><decl><type><name>testEquals</name></type></decl></parameter> )</parameter_list>;</constructor_decl>
      <constructor_decl><name>CPPUNIT_TEST_SUITE_END</name><parameter_list>()</parameter_list>;</constructor_decl>


    	<decl_stmt><decl><type><name>double</name></type>			<name>m_value1</name></decl>;</decl_stmt>
    	<decl_stmt><decl><type><name>double</name></type>			<name>m_value2</name></decl>;</decl_stmt>
    	<function_decl><type><name>void</name></type>			<name>example</name> <parameter_list>()</parameter_list>;</function_decl>
    	<function_decl><type><name>void</name></type>			<name>anotherExample</name> <parameter_list>()</parameter_list>;</function_decl>
    	<function_decl><type><name>void</name></type>			<name>testEquals</name> <parameter_list>()</parameter_list>;</function_decl>


    </private><public>public:


    	<function_decl><type><name>void</name></type>			<name>setUp</name> <parameter_list>()</parameter_list>;</function_decl>
    </public>}</block>;</class>




    <expr_stmt><expr><call><name>CPPUNIT_TEST_SUITE_NAMED_REGISTRATION</name><argument_list>( <argument><expr><name>ExampleTestCase</name></expr></argument>, <argument><expr><literal type="string">"ExampleTestCase"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>


    <comment type="block" format="doxygen">/** @stereotype command test_initializer */</comment>
    <function stereotype="command test_initializer "><type><name>void</name></type> <name><name>ExampleTestCase</name><operator>::</operator><name>setUp</name></name> <parameter_list>()</parameter_list>
    <block>{
    	<expr_stmt><expr><name>m_value1</name> <operator>=</operator> <literal type="number">2.0</literal></expr>;</expr_stmt>
    	<expr_stmt><expr><name>m_value2</name> <operator>=</operator> <literal type="number">3.0</literal></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="doxygen">/** @stereotype command collaborator boolean_verifier equality_verifier doubles_equality_verifier hybrid_verifier */</comment>
    <function stereotype="command collaborator boolean_verifier equality_verifier doubles_equality_verifier hybrid_verifier "><type><name>void</name></type> <name><name>ExampleTestCase</name><operator>::</operator><name>testEquals</name></name> <parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>auto_ptr</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name></name></type>	<name>l1</name> <argument_list>(<argument><expr><operator>new</operator> <call><name>long</name> <argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>auto_ptr</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name></name></type>	<name>l2</name> <argument_list>(<argument><expr><operator>new</operator> <call><name>long</name> <argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>


    	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name> <argument_list>(<argument><expr><name>m_value1</name></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><literal type="number">0.01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name> <argument_list>(<argument><expr><name>m_value2</name></expr></argument>, <argument><expr><literal type="number">3.0</literal></expr></argument>, <argument><expr><literal type="number">0.01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name> <argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name> <argument_list>(<argument><expr><literal type="number">12L</literal></expr></argument>, <argument><expr><literal type="number">12L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name> <argument_list>(<argument><expr><operator>*</operator><name>l1</name></expr></argument>, <argument><expr><operator>*</operator><name>l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    	<expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><literal type="number">12L</literal> <operator>==</operator> <literal type="number">12L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name> <argument_list>(<argument><expr><literal type="number">12.0</literal></expr></argument>, <argument><expr><literal type="number">11.99</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>



    <function><type><name><name>CppUnit</name><operator>::</operator><name>Test</name></name> <modifier>*</modifier></type><name>suite</name><parameter_list>()</parameter_list>
    <block>{
      <decl_stmt><decl><type><name><name>CppUnit</name><operator>::</operator><name>TestFactoryRegistry</name></name> <modifier>&amp;</modifier></type><name>registry</name> <init>=
                          <expr><call><name><name>CppUnit</name><operator>::</operator><name>TestFactoryRegistry</name><operator>::</operator><name>getRegistry</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


      <expr_stmt><expr><call><name><name>registry</name><operator>.</operator><name>registerFactory</name></name><argument_list>(
          <argument><expr><operator>&amp;</operator><call><name><name>CppUnit</name><operator>::</operator><name>TestFactoryRegistry</name><operator>::</operator><name>getRegistry</name></name><argument_list>( <argument><expr><literal type="string">"ExampleTestCase"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>registry</name><operator>.</operator><name>makeTest</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>



    <function><type><name>int</name></type> <name>main</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter> )</parameter_list>
    <block>{
      <comment type="line">// if command line contains "-selftest" then this is the post build check</comment>
      <comment type="line">// =&gt; the output must be in the compiler error format.</comment>
      <decl_stmt><decl><type><name>bool</name></type> <name>selfTest</name> <init>= <expr><operator>(</operator><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator>  <operator>&amp;&amp;</operator>
                      <operator>(</operator><call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><literal type="string">"-selftest"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>


      <decl_stmt><decl><type><name><name>CppUnit</name><operator>::</operator><name>TextUi</name><operator>::</operator><name>TestRunner</name></name></type> <name>runner</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>runner</name><operator>.</operator><name>addTest</name></name><argument_list>( <argument><expr><call><name>suite</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>   <comment type="line">// Add the top suite to the test runner</comment>


      <if>if <condition>( <expr><name>selfTest</name></expr> )</condition><then>
      <block>{ <comment type="line">// Change the default outputter to a compiler error format outputter</comment>
        <comment type="line">// The test runner owns the new outputter.</comment>
        <expr_stmt><expr><call><name><name>runner</name><operator>.</operator><name>setOutputter</name></name><argument_list>( <argument><expr><call><name><name>CppUnit</name><operator>::</operator><name>CompilerOutputter</name><operator>::</operator><name>defaultOutputter</name></name><argument_list>(
                                                            <argument><expr><operator>&amp;</operator><call><name><name>runner</name><operator>.</operator><name>result</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                            <argument><expr><name><name>std</name><operator>::</operator><name>cerr</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>


      <comment type="line">// Run the test.</comment>
      <decl_stmt><decl><type><name>bool</name></type> <name>wasSucessful</name> <init>= <expr><call><name><name>runner</name><operator>.</operator><name>run</name></name><argument_list>( <argument><expr><literal type="string">""</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>


      <comment type="line">// Return error code 1 if any tests failed.</comment>
      <return>return <expr><ternary><condition><expr><name>wasSucessful</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
    }</block></function>
</unit>
