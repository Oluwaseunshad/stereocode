<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="public_field_verifier_2.cpp"><comment type="line">// Copyright Â© 2010 Scott Gustafson. All Rights Reserved.</comment>
<comment type="line">// http://www.garlicsoftware.com</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdexcept&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FixedPoint.h"</cpp:file></cpp:include>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>mark</name> <name>-</name></cpp:pragma>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>qDebug</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cppunit/extensions/HelperMacros.h&gt;</cpp:file></cpp:include>

<class>class <name>FixedPointTest</name> <super>: <specifier>public</specifier> <name><name>CPPUNIT_NS</name><operator>::</operator><name>TestFixture</name></name></super> <block>{<private type="default">
	<constructor_decl><name>CPPUNIT_TEST_SUITE</name><parameter_list>( <parameter><decl><type><name>FixedPointTest</name></type></decl></parameter> )</parameter_list>;</constructor_decl>
	<constructor_decl><name>CPPUNIT_TEST</name><parameter_list>( <parameter><decl><type><name>uint32ConstructorTest</name></type></decl></parameter> )</parameter_list>;</constructor_decl>
	<constructor_decl><name>CPPUNIT_TEST</name><parameter_list>( <parameter><decl><type><name>floatConstructorTest</name></type></decl></parameter> )</parameter_list>;</constructor_decl>
	<constructor_decl><name>CPPUNIT_TEST</name><parameter_list>( <parameter><decl><type><name>copyConstructorTest</name></type></decl></parameter> )</parameter_list>;</constructor_decl>
	<constructor_decl><name>CPPUNIT_TEST</name><parameter_list>( <parameter><decl><type><name>assignmentOperatorTest</name></type></decl></parameter> )</parameter_list>;</constructor_decl>
	<constructor_decl><name>CPPUNIT_TEST</name><parameter_list>( <parameter><decl><type><name>floatValueTest</name></type></decl></parameter> )</parameter_list>;</constructor_decl>
	<constructor_decl><name>CPPUNIT_TEST</name><parameter_list>( <parameter><decl><type><name>stringValueTest</name></type></decl></parameter> )</parameter_list>;</constructor_decl>
	<constructor_decl><name>CPPUNIT_TEST</name><parameter_list>( <parameter><decl><type><name>encodedValueTest</name></type></decl></parameter> )</parameter_list>;</constructor_decl>
	<constructor_decl><name>CPPUNIT_TEST_SUITE_END</name><parameter_list>()</parameter_list>;</constructor_decl>

	</private><public>public:
		<function_decl><type><name>void</name></type> <name>setUp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
		<function_decl><type><name>void</name></type> <name>tearDown</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

	</public><protected>protected:
		<function_decl><type><name>void</name></type> <name>uint32ConstructorTest</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
		<function_decl><type><name>void</name></type> <name>floatConstructorTest</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
		<function_decl><type><name>void</name></type> <name>copyConstructorTest</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
		<function_decl><type><name>void</name></type> <name>assignmentOperatorTest</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
		<function_decl><type><name>void</name></type> <name>floatValueTest</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
		<function_decl><type><name>void</name></type> <name>stringValueTest</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
		<function_decl><type><name>void</name></type> <name>encodedValueTest</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

	</protected><private>private:
		<decl_stmt><decl><type><name>FixedPoint</name><modifier>*</modifier></type> <name>test1</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FixedPoint</name><modifier>*</modifier></type> <name>test2</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FixedPoint</name><modifier>*</modifier></type> <name>test3</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FixedPoint</name><modifier>*</modifier></type> <name>test4</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FixedPoint</name><modifier>*</modifier></type> <name>test5</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FixedPoint</name><modifier>*</modifier></type> <name>test6</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FixedPoint</name><modifier>*</modifier></type> <name>test7</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FixedPoint</name><modifier>*</modifier></type> <name>test8</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FixedPoint</name><modifier>*</modifier></type> <name>test9</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FixedPoint</name><modifier>*</modifier></type> <name>test10</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>FixedPoint</name><modifier>*</modifier></type> <name>test11</name></decl>;</decl_stmt>
</private>}</block>;</class>

<expr_stmt><expr><call><name>CPPUNIT_TEST_SUITE_REGISTRATION</name><argument_list>( <argument><expr><name>FixedPointTest</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/** @stereotype command test_initializer */</comment>
<function stereotype="command test_initializer "><type><name>void</name></type> <name><name>FixedPointTest</name><operator>::</operator><name>setUp</name></name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>test1</name> <operator>=</operator> <operator>new</operator> <call><name>FixedPoint</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt32</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">0x00008000</literal></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>test2</name> <operator>=</operator> <operator>new</operator> <call><name>FixedPoint</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt32</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">0x80008000</literal></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>test3</name> <operator>=</operator> <operator>new</operator> <call><name>FixedPoint</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt32</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">0x00010000</literal></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>test4</name> <operator>=</operator> <operator>new</operator> <call><name>FixedPoint</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt32</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">0x80014000</literal></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>test5</name> <operator>=</operator> <operator>new</operator> <call><name>FixedPoint</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt32</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">0x000191eb</literal></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>test6</name> <operator>=</operator> <operator>new</operator> <call><name>FixedPoint</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt32</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">0x00327eb8</literal></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>test7</name> <operator>=</operator> <operator>new</operator> <call><name>FixedPoint</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt32</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">0x00000000</literal></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>test8</name> <operator>=</operator> <operator>new</operator> <call><name>FixedPoint</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt32</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>test9</name> <operator>=</operator> <operator>new</operator> <call><name>FixedPoint</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt32</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">0x7FFFFFFF</literal></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>test10</name> <operator>=</operator> <operator>new</operator> <call><name>FixedPoint</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt32</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">0x7FFFFFFE</literal></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>test11</name> <operator>=</operator> <operator>new</operator> <call><name>FixedPoint</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt32</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">0x80000000</literal></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block" format="doxygen">/** @stereotype test_cleaner */</comment>
<function stereotype="test_cleaner "><type><name>void</name></type> <name><name>FixedPointTest</name><operator>::</operator><name>tearDown</name></name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><operator>delete</operator> <name>test1</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>test2</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>test3</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>test4</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>test5</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>test6</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>test7</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>test8</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>test9</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>test10</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>test11</name></expr>;</expr_stmt>
}</block></function>


<comment type="block" format="doxygen">/** @stereotype command collaborator equality_verifier doubles_equality_verifier exception_verifier no_exception_verifier hybrid_verifier public_field_verifier */</comment>
<function stereotype="command collaborator equality_verifier doubles_equality_verifier exception_verifier no_exception_verifier hybrid_verifier public_field_verifier "><type><name>void</name></type> <name><name>FixedPointTest</name><operator>::</operator><name>floatConstructorTest</name></name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>FixedPoint</name></type> <name>special1</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>special1</name><operator>.</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special1</name><operator>.</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name><name>special1</name><operator>.</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>FixedPoint</name></type> <name>special2</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>special2</name><operator>.</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special2</name><operator>.</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name><name>special2</name><operator>.</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>FixedPoint</name></type> <name>special3</name><argument_list>(<argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>special3</name><operator>.</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special3</name><operator>.</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name><name>special3</name><operator>.</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>FixedPoint</name></type> <name>special4</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2.5</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>special4</name><operator>.</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special4</name><operator>.</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><name><name>special4</name><operator>.</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>FixedPoint</name></type> <name>special5</name><argument_list>(<argument><expr><literal type="number">3.14</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>special5</name><operator>.</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special5</name><operator>.</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.14</literal></expr></argument>, <argument><expr><name><name>special5</name><operator>.</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>FixedPoint</name></type> <name>special6</name><argument_list>(<argument><expr><literal type="number">100.99</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>special6</name><operator>.</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special6</name><operator>.</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.99</literal></expr></argument>, <argument><expr><name><name>special6</name><operator>.</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>FixedPoint</name></type> <name>special7</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>special7</name><operator>.</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special7</name><operator>.</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name><name>special7</name><operator>.</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>FixedPoint</name></type> <name>special8</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">65535.99997</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>special8</name><operator>.</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special8</name><operator>.</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.99997</literal></expr></argument>, <argument><expr><name><name>special8</name><operator>.</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>FixedPoint</name></type> <name>special9</name><argument_list>(<argument><expr><literal type="number">65535.99997</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>special9</name><operator>.</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special9</name><operator>.</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.99997</literal></expr></argument>, <argument><expr><name><name>special9</name><operator>.</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>FixedPoint</name></type> <name>special10</name><argument_list>(<argument><expr><literal type="number">65535.99994</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>special10</name><operator>.</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special10</name><operator>.</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.99994</literal></expr></argument>, <argument><expr><name><name>special10</name><operator>.</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Note that this value is not round tripped here as -0.0 is no different from 0.0</comment>
	<decl_stmt><decl><type><name>FixedPoint</name></type> <name>special11</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>special11</name><operator>.</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special11</name><operator>.</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name><name>special11</name><operator>.</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>FixedPoint</name><modifier>*</modifier></type> <name>special100</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_THROW</name><argument_list>(<argument><expr><name>special100</name> <operator>=</operator> <operator>new</operator> <call><name>FixedPoint</name><argument_list>(<argument><expr><literal type="number">65535.999971</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>out_of_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>special100</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_THROW</name><argument_list>(<argument><expr><name>special100</name> <operator>=</operator> <operator>new</operator> <call><name>FixedPoint</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">65535.999971</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>out_of_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>special100</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_THROW</name><argument_list>(<argument><expr><name>special100</name> <operator>=</operator> <operator>new</operator> <call><name>FixedPoint</name><argument_list>(<argument><expr><literal type="number">65536.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>out_of_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>special100</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_THROW</name><argument_list>(<argument><expr><name>special100</name> <operator>=</operator> <operator>new</operator> <call><name>FixedPoint</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">65536.0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>out_of_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>special100</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_NO_THROW</name><argument_list>(<argument><expr><name>special100</name> <operator>=</operator> <operator>new</operator> <call><name>FixedPoint</name><argument_list>(<argument><expr><literal type="number">65535.99997</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>special100</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CPPUNIT_ASSERT_NO_THROW</name><argument_list>(<argument><expr><name>special100</name> <operator>=</operator> <operator>new</operator> <call><name>FixedPoint</name><argument_list>(<argument><expr><literal type="number">0.999971</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <name>special100</name></expr>;</expr_stmt>
}</block></function>



<comment type="block" format="doxygen">/** @stereotype command collaborator equality_verifier doubles_equality_verifier hybrid_verifier public_field_verifier */</comment>
<function stereotype="command collaborator equality_verifier doubles_equality_verifier hybrid_verifier public_field_verifier "><type><name>void</name></type> <name><name>FixedPointTest</name><operator>::</operator><name>assignmentOperatorTest</name></name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
   <decl_stmt><decl><type><name>FixedPoint</name></type> <name>special1</name><argument_list>(<argument><expr><operator>*</operator><name>test7</name></expr></argument>)</argument_list></decl>;</decl_stmt>
   <expr_stmt><expr><name>special1</name> <operator>=</operator> <operator>*</operator><name>test1</name></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>special1</name><operator>.</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special1</name><operator>.</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name><name>special1</name><operator>.</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <decl_stmt><decl><type><name>FixedPoint</name></type> <name>special2</name><argument_list>(<argument><expr><operator>*</operator><name>test7</name></expr></argument>)</argument_list></decl>;</decl_stmt>
   <expr_stmt><expr><name>special2</name> <operator>=</operator> <operator>*</operator><name>test2</name></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>special2</name><operator>.</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special2</name><operator>.</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name><name>special2</name><operator>.</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <decl_stmt><decl><type><name>FixedPoint</name></type> <name>special3</name><argument_list>(<argument><expr><operator>*</operator><name>test7</name></expr></argument>)</argument_list></decl>;</decl_stmt>
   <expr_stmt><expr><name>special3</name> <operator>=</operator> <operator>*</operator><name>test3</name></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>special3</name><operator>.</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special3</name><operator>.</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name><name>special3</name><operator>.</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <decl_stmt><decl><type><name>FixedPoint</name></type> <name>special4</name><argument_list>(<argument><expr><operator>*</operator><name>test7</name></expr></argument>)</argument_list></decl>;</decl_stmt>
   <expr_stmt><expr><name>special4</name> <operator>=</operator> <operator>*</operator><name>test4</name></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>special4</name><operator>.</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special4</name><operator>.</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.5</literal></expr></argument>, <argument><expr><name><name>special4</name><operator>.</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <decl_stmt><decl><type><name>FixedPoint</name></type> <name>special5</name><argument_list>(<argument><expr><operator>*</operator><name>test7</name></expr></argument>)</argument_list></decl>;</decl_stmt>
   <expr_stmt><expr><name>special5</name> <operator>=</operator> <operator>*</operator><name>test5</name></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>special5</name><operator>.</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special5</name><operator>.</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.14</literal></expr></argument>, <argument><expr><name><name>special5</name><operator>.</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <decl_stmt><decl><type><name>FixedPoint</name></type> <name>special6</name><argument_list>(<argument><expr><operator>*</operator><name>test7</name></expr></argument>)</argument_list></decl>;</decl_stmt>
   <expr_stmt><expr><name>special6</name> <operator>=</operator> <operator>*</operator><name>test6</name></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>special6</name><operator>.</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special6</name><operator>.</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.99</literal></expr></argument>, <argument><expr><name><name>special6</name><operator>.</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <decl_stmt><decl><type><name>FixedPoint</name></type> <name>special7</name><argument_list>(<argument><expr><operator>*</operator><name>test6</name></expr></argument>)</argument_list></decl>;</decl_stmt>   <comment type="line">// using 6 to test 7</comment>
   <expr_stmt><expr><name>special7</name> <operator>=</operator> <operator>*</operator><name>test7</name></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>special7</name><operator>.</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special7</name><operator>.</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name><name>special7</name><operator>.</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <decl_stmt><decl><type><name>FixedPoint</name></type> <name>special8</name><argument_list>(<argument><expr><operator>*</operator><name>test7</name></expr></argument>)</argument_list></decl>;</decl_stmt>
   <expr_stmt><expr><name>special8</name> <operator>=</operator> <operator>*</operator><name>test8</name></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name><name>special8</name><operator>.</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special8</name><operator>.</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.99997</literal></expr></argument>, <argument><expr><name><name>special8</name><operator>.</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <decl_stmt><decl><type><name>FixedPoint</name></type> <name>special9</name><argument_list>(<argument><expr><operator>*</operator><name>test7</name></expr></argument>)</argument_list></decl>;</decl_stmt>
   <expr_stmt><expr><name>special9</name> <operator>=</operator> <operator>*</operator><name>test9</name></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>special9</name><operator>.</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special9</name><operator>.</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.99997</literal></expr></argument>, <argument><expr><name><name>special9</name><operator>.</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <decl_stmt><decl><type><name>FixedPoint</name></type> <name>special10</name><argument_list>(<argument><expr><operator>*</operator><name>test7</name></expr></argument>)</argument_list></decl>;</decl_stmt>
   <expr_stmt><expr><name>special10</name> <operator>=</operator> <operator>*</operator><name>test10</name></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>special10</name><operator>.</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special10</name><operator>.</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.99994</literal></expr></argument>, <argument><expr><name><name>special10</name><operator>.</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <decl_stmt><decl><type><name>FixedPoint</name></type> <name>special11</name><argument_list>(<argument><expr><operator>*</operator><name>test10</name></expr></argument>)</argument_list></decl>;</decl_stmt>
   <expr_stmt><expr><name>special11</name> <operator>=</operator> <name>special11</name></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>special11</name><operator>.</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special11</name><operator>.</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.99994</literal></expr></argument>, <argument><expr><name><name>special11</name><operator>.</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <decl_stmt><decl><type><name>FixedPoint</name><modifier>*</modifier></type> <name>special12</name></decl>;</decl_stmt>
   <expr_stmt><expr><name>special12</name> <operator>=</operator> <name>test10</name></expr>;</expr_stmt>
   <expr_stmt><expr><operator>*</operator><name>special12</name> <operator>=</operator> <operator>*</operator><name>test10</name></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>special12</name><operator>-&gt;</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special12</name><operator>-&gt;</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.99994</literal></expr></argument>, <argument><expr><name><name>special12</name><operator>-&gt;</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <decl_stmt><decl><type><name>FixedPoint</name><modifier>*</modifier></type> <name>special13</name></decl>;</decl_stmt>
   <expr_stmt><expr><name>special13</name> <operator>=</operator> <name>test10</name></expr>;</expr_stmt>
   <expr_stmt><expr><operator>*</operator><name>special13</name> <operator>=</operator> <operator>*</operator><name>test10</name> <operator>=</operator> <operator>*</operator><name>test6</name></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>test10</name><operator>-&gt;</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>test10</name><operator>-&gt;</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.99</literal></expr></argument>, <argument><expr><name><name>test10</name><operator>-&gt;</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name><name>special13</name><operator>-&gt;</operator><name>fNegative</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>UInt16</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></cast></expr></argument>, <argument><expr><name><name>special13</name><operator>-&gt;</operator><name>fIntPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><literal type="number">0.99</literal></expr></argument>, <argument><expr><name><name>special13</name><operator>-&gt;</operator><name>fFractPart</name></name></expr></argument>, <argument><expr><call><name><name>FixedPoint</name><operator>::</operator><name>kMarginOfError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// qDebug</comment>
</unit>
