<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="api_utility_verifier.cpp"><comment type="line">// DiskDataTest.cpp: implementation of the DiskDataTest class.</comment>
<comment type="line">//</comment>
<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////////////</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdafx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DiskDataTestCase.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_DEBUG</name></cpp:ifdef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>THIS_FILE</name></cpp:undef>
<decl_stmt><decl><specifier>static</specifier> <type><name>char</name></type> <name><name>THIS_FILE</name><index>[]</index></name><init>=<expr><name>__FILE__</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>new</name></cpp:macro> <cpp:value>DEBUG_NEW</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="line">//</comment>
<comment type="line">// These are correct values stored in auxiliar file</comment>
<comment type="line">//</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUX_FILENAME</name></cpp:macro>	<cpp:value>"..\\Test\\ok_data.dat"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_NUMBER</name></cpp:macro>		<cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_STRING</name></cpp:macro>		<cpp:value>"this is correct text stored in auxiliar file"</cpp:value></cpp:define>



<comment type="line">//</comment>
<comment type="line">// Aux function:</comment>
<comment type="line">//		Read all file and allocates a buffer </comment>
<function><specifier>inline</specifier> <type><name>DWORD</name></type> <name>ReadAllFileInMemory</name><parameter_list>(<parameter><decl><type><name>LPCTSTR</name></type>  <name>filename</name></decl></parameter>, <parameter><decl><type><name>BYTE</name><modifier>*</modifier>  <modifier>&amp;</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>DWORD</name></type>  	<name>fileSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fileRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type> 	<name>hFile</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>hFile</name> <operator>=</operator> <call><name><operator>::</operator><name>CreateFile</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>GENERIC_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
				<argument><expr><name>OPEN_EXISTING</name></expr></argument>, <argument><expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// files must exist</comment>
	<if>if <condition>(<expr><name>INVALID_HANDLE_VALUE</name> <operator>!=</operator> <name>hFile</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>fileSize</name> <operator>=</operator> <call><name><operator>::</operator><name>GetFileSize</name></name><argument_list>(<argument><expr><name>hFile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>fileSize</name> <operator>!=</operator> <literal type="number">0xFFFFFFFF</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>new</operator> <name><name>BYTE</name><index>[<expr><name>fileSize</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><operator>::</operator><name>ZeroMemory</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>fileSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name><operator>::</operator><name>ReadFile</name></name><argument_list>(<argument><expr><name>hFile</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>fileSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileRead</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name><operator>::</operator><name>CloseHandle</name></name><argument_list>(<argument><expr><name>hFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return>return <expr><name>fileSize</name></expr>;</return>
}</block></function>

<expr_stmt><expr><call><name>CPPUNIT_TEST_SUITE_REGISTRATION</name><argument_list>(<argument><expr><name>DiskDataTestCase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block" format="doxygen">/** @stereotype set test_initializer */</comment>
<function stereotype="set test_initializer "><type><name>void</name></type> <name><name>DiskDataTestCase</name><operator>::</operator><name>setUp</name></name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>fixture</name> <operator>=</operator> <operator>new</operator> <call><name>DiskData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
 
<comment type="block" format="doxygen">/** @stereotype set test_cleaner */</comment>
<function stereotype="set test_cleaner "><type><name>void</name></type> <name><name>DiskDataTestCase</name><operator>::</operator><name>tearDown</name></name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><operator>delete</operator> <name>fixture</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>fixture</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
}</block></function>


<comment type="block" format="doxygen">/** @stereotype command collaborator boolean_verifier api_utility_verifier */</comment>
<function stereotype="command collaborator boolean_verifier api_utility_verifier "><type><name>void</name></type> <name><name>DiskDataTestCase</name><operator>::</operator><name>storeTest</name></name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>DATA</name></type>	<name>d</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type>  	<name>tmpSize</name></decl>, <decl><type ref="prev"/><name>auxSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BYTE</name> 	<modifier>*</modifier></type><name>tmpBuff</name></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>auxBuff</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TCHAR</name></type>	<name><name>absoluteFilename</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type>	<name>size</name> <init>= <expr><name>MAX_PATH</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// configures structure with known data</comment>
	<expr_stmt><expr><name><name>d</name><operator>.</operator><name>number</name></name> <operator>=</operator> <name>FILE_NUMBER</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>d</name><operator>.</operator><name>string</name></name></expr></argument>, <argument><expr><name>FILE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// convert from relative to absolute path</comment>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>absoluteFilename</name></expr></argument>, <argument><expr><name>AUX_FILENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>( <argument><expr><call><name>RelativeToAbsolutePath</name><argument_list>(<argument><expr><name>absoluteFilename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// executes action</comment>
	<expr_stmt><expr><call><name><name>fixture</name><operator>-&gt;</operator><name>setData</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>( <argument><expr><call><name><name>fixture</name><operator>-&gt;</operator><name>store</name></name><argument_list>(<argument><expr><literal type="string">"data.tmp"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Read both files contents and check results </comment>
	<expr_stmt><expr><name>tmpSize</name> <operator>=</operator> <call><name>ReadAllFileInMemory</name><argument_list>(<argument><expr><literal type="string">"data.tmp"</literal></expr></argument>, <argument><expr><name>tmpBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>auxSize</name> <operator>=</operator> <call><name>ReadAllFileInMemory</name><argument_list>(<argument><expr><name>absoluteFilename</name></expr></argument>, <argument><expr><name>auxBuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<expr_stmt><expr><operator>delete</operator> <index>[]</index> <name>tmpBuff</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>delete</operator> <index>[]</index> <name>auxBuff</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><operator>::</operator><name>DeleteFile</name></name><argument_list>(<argument><expr><literal type="string">"data.tmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
