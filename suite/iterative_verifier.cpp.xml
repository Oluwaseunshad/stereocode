<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="iterative_verifier.cpp"><class>class <name>suiteOfTests</name> <super>: <specifier>public</specifier> <name><name>CppUnit</name><operator>::</operator><name>TestFixture</name></name></super> <block>{<private type="default">
    <comment type="block">/* snip */</comment>
</private><public>public:
    <comment type="block" format="doxygen">/** @stereotype command boolean_verifier equality_verifier doubles_equality_verifier exception_verifier no_exception_verifier assertion_verifier utility_verifier hybrid_verifier branch_verifier iterative_verifier */</comment>
    <function stereotype="command collaborator boolean_verifier equality_verifier doubles_equality_verifier exception_verifier no_exception_verifier assertion_verifier utility_verifier hybrid_verifier branch_verifier iterative_verifier "><type><name>void</name></type> <name>ageTest</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>age</name> <init>= <expr><call><name><name>ClassImTesting</name><operator>.</operator><name>getAge</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// simple asserts</comment>
        <expr_stmt><expr><call><name>CPPUNIT_ASSERT</name><argument_list>(<argument><expr><name>age</name> <operator>==</operator> <literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CPPUNIT_ASSERT_MESSAGE</name><argument_list>(<argument><expr><literal type="string">"Must be 18"</literal></expr></argument>, <argument><expr><name>age</name> <operator>==</operator> <literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// asserting equality:</comment>
        <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL</name><argument_list>(<argument><expr><name>age</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CPPUNIT_ASSERT_EQUAL_MESSAGE</name><argument_list>(<argument><expr><literal type="string">"Must be 18"</literal></expr></argument>, <argument><expr><name>age</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CPPUNIT_ASSERT_DOUBLES_EQUAL</name><argument_list>(<argument><expr><name>age</name> <operator>*</operator> <literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">18.0</literal></expr></argument>, <argument><expr><literal type="number">1e-10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// exception asserts:</comment>
        <expr_stmt><expr><call><name>CPPUNIT_ASSERT_THROW</name><argument_list>( <argument><expr><call><name><name>ClassImTesting</name><operator>-&gt;</operator><name>testAge</name></name><argument_list>(<argument><expr><name>age</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>WrongAgeException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CPPUNIT_ASSERT_NO_THROW</name><argument_list>(  <argument><expr><call><name><name>ClassImTesting</name><operator>-&gt;</operator><name>testAge</name></name><argument_list>(<argument><expr><name>age</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>WrongAgeException</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// inverse asserts:</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name><block>{
        	<if>if<condition>(<expr><name>age</name> <operator>!=</operator> <literal type="number">18</literal></expr>)</condition><then><block>{
            		<expr_stmt><expr><call><name>CPPUNIT_FAIL</name><argument_list>(<argument><expr><literal type="string">"Must be 18"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        		<expr_stmt><expr><call><name>CPPUNIT_ASSERT_ASSERTION_FAIL</name><argument_list>( <argument><expr><call><name>CPP_UNIT_ASSERT</name><argument_list>( <argument><expr><name>age</name> <operator>!=</operator> <literal type="number">18</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt/></block></then></if>}</block></expr></incr>
	}</control></for>
    }</block></function>

</public>}</block>;</class>
</unit>
